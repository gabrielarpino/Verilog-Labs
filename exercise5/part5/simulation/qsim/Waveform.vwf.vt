// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/27/2015 11:29:58"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    part5
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module part5_vlg_sample_tst(
	CLOCK_50,
	SW,
	sampler_tx
);
input  CLOCK_50;
input [1:0] SW;
output sampler_tx;

reg sample;
time current_time;
always @(CLOCK_50 or SW)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module part5_vlg_check_tst (
	HEX0,
	countfast,
	countslow,
	equal9,
	reset,
	sec,
	sampler_rx
);
input [6:0] HEX0;
input [25:0] countfast;
input [4:0] countslow;
input  equal9;
input  reset;
input  sec;
input sampler_rx;

reg [6:0] HEX0_expected;
reg [25:0] countfast_expected;
reg [4:0] countslow_expected;
reg  equal9_expected;
reg  reset_expected;
reg  sec_expected;

reg [6:0] HEX0_prev;
reg [25:0] countfast_prev;
reg [4:0] countslow_prev;
reg  equal9_prev;
reg  reset_prev;
reg  sec_prev;

reg [6:0] HEX0_expected_prev;
reg [25:0] countfast_expected_prev;
reg [4:0] countslow_expected_prev;
reg  equal9_expected_prev;
reg  reset_expected_prev;
reg  sec_expected_prev;

reg [6:0] last_HEX0_exp;
reg [25:0] last_countfast_exp;
reg [4:0] last_countslow_exp;
reg  last_equal9_exp;
reg  last_reset_exp;
reg  last_sec_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	HEX0_prev = HEX0;
	countfast_prev = countfast;
	countslow_prev = countslow;
	equal9_prev = equal9;
	reset_prev = reset;
	sec_prev = sec;
end

// update expected /o prevs

always @(trigger)
begin
	HEX0_expected_prev = HEX0_expected;
	countfast_expected_prev = countfast_expected;
	countslow_expected_prev = countslow_expected;
	equal9_expected_prev = equal9_expected;
	reset_expected_prev = reset_expected;
	sec_expected_prev = sec_expected;
end


// expected HEX0[ 6 ]
initial
begin
	HEX0_expected[6] = 1'bX;
end 
// expected HEX0[ 5 ]
initial
begin
	HEX0_expected[5] = 1'bX;
end 
// expected HEX0[ 4 ]
initial
begin
	HEX0_expected[4] = 1'bX;
end 
// expected HEX0[ 3 ]
initial
begin
	HEX0_expected[3] = 1'bX;
end 
// expected HEX0[ 2 ]
initial
begin
	HEX0_expected[2] = 1'bX;
end 
// expected HEX0[ 1 ]
initial
begin
	HEX0_expected[1] = 1'bX;
end 
// expected HEX0[ 0 ]
initial
begin
	HEX0_expected[0] = 1'bX;
end 
// expected countfast[ 25 ]
initial
begin
	countfast_expected[25] = 1'bX;
end 
// expected countfast[ 24 ]
initial
begin
	countfast_expected[24] = 1'bX;
end 
// expected countfast[ 23 ]
initial
begin
	countfast_expected[23] = 1'bX;
end 
// expected countfast[ 22 ]
initial
begin
	countfast_expected[22] = 1'bX;
end 
// expected countfast[ 21 ]
initial
begin
	countfast_expected[21] = 1'bX;
end 
// expected countfast[ 20 ]
initial
begin
	countfast_expected[20] = 1'bX;
end 
// expected countfast[ 19 ]
initial
begin
	countfast_expected[19] = 1'bX;
end 
// expected countfast[ 18 ]
initial
begin
	countfast_expected[18] = 1'bX;
end 
// expected countfast[ 17 ]
initial
begin
	countfast_expected[17] = 1'bX;
end 
// expected countfast[ 16 ]
initial
begin
	countfast_expected[16] = 1'bX;
end 
// expected countfast[ 15 ]
initial
begin
	countfast_expected[15] = 1'bX;
end 
// expected countfast[ 14 ]
initial
begin
	countfast_expected[14] = 1'bX;
end 
// expected countfast[ 13 ]
initial
begin
	countfast_expected[13] = 1'bX;
end 
// expected countfast[ 12 ]
initial
begin
	countfast_expected[12] = 1'bX;
end 
// expected countfast[ 11 ]
initial
begin
	countfast_expected[11] = 1'bX;
end 
// expected countfast[ 10 ]
initial
begin
	countfast_expected[10] = 1'bX;
end 
// expected countfast[ 9 ]
initial
begin
	countfast_expected[9] = 1'bX;
end 
// expected countfast[ 8 ]
initial
begin
	countfast_expected[8] = 1'bX;
end 
// expected countfast[ 7 ]
initial
begin
	countfast_expected[7] = 1'bX;
end 
// expected countfast[ 6 ]
initial
begin
	countfast_expected[6] = 1'bX;
end 
// expected countfast[ 5 ]
initial
begin
	countfast_expected[5] = 1'bX;
end 
// expected countfast[ 4 ]
initial
begin
	countfast_expected[4] = 1'bX;
end 
// expected countfast[ 3 ]
initial
begin
	countfast_expected[3] = 1'bX;
end 
// expected countfast[ 2 ]
initial
begin
	countfast_expected[2] = 1'bX;
end 
// expected countfast[ 1 ]
initial
begin
	countfast_expected[1] = 1'bX;
end 
// expected countfast[ 0 ]
initial
begin
	countfast_expected[0] = 1'bX;
end 
// expected countslow[ 4 ]
initial
begin
	countslow_expected[4] = 1'bX;
end 
// expected countslow[ 3 ]
initial
begin
	countslow_expected[3] = 1'bX;
end 
// expected countslow[ 2 ]
initial
begin
	countslow_expected[2] = 1'bX;
end 
// expected countslow[ 1 ]
initial
begin
	countslow_expected[1] = 1'bX;
end 
// expected countslow[ 0 ]
initial
begin
	countslow_expected[0] = 1'bX;
end 

// expected equal9
initial
begin
	equal9_expected = 1'bX;
end 

// expected reset
initial
begin
	reset_expected = 1'bX;
end 

// expected sec
initial
begin
	sec_expected = 1'bX;
end 
// generate trigger
always @(HEX0_expected or HEX0 or countfast_expected or countfast or countslow_expected or countslow or equal9_expected or equal9 or reset_expected or reset or sec_expected or sec)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected HEX0 = %b | expected countfast = %b | expected countslow = %b | expected equal9 = %b | expected reset = %b | expected sec = %b | ",HEX0_expected_prev,countfast_expected_prev,countslow_expected_prev,equal9_expected_prev,reset_expected_prev,sec_expected_prev);
	$display("| real HEX0 = %b | real countfast = %b | real countslow = %b | real equal9 = %b | real reset = %b | real sec = %b | ",HEX0_prev,countfast_prev,countslow_prev,equal9_prev,reset_prev,sec_prev);
`endif
	if (
		( HEX0_expected_prev[0] !== 1'bx ) && ( HEX0_prev[0] !== HEX0_expected_prev[0] )
		&& ((HEX0_expected_prev[0] !== last_HEX0_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_expected_prev);
		$display ("     Real value = %b", HEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX0_exp[0] = HEX0_expected_prev[0];
	end
	if (
		( HEX0_expected_prev[1] !== 1'bx ) && ( HEX0_prev[1] !== HEX0_expected_prev[1] )
		&& ((HEX0_expected_prev[1] !== last_HEX0_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_expected_prev);
		$display ("     Real value = %b", HEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX0_exp[1] = HEX0_expected_prev[1];
	end
	if (
		( HEX0_expected_prev[2] !== 1'bx ) && ( HEX0_prev[2] !== HEX0_expected_prev[2] )
		&& ((HEX0_expected_prev[2] !== last_HEX0_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_expected_prev);
		$display ("     Real value = %b", HEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX0_exp[2] = HEX0_expected_prev[2];
	end
	if (
		( HEX0_expected_prev[3] !== 1'bx ) && ( HEX0_prev[3] !== HEX0_expected_prev[3] )
		&& ((HEX0_expected_prev[3] !== last_HEX0_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_expected_prev);
		$display ("     Real value = %b", HEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX0_exp[3] = HEX0_expected_prev[3];
	end
	if (
		( HEX0_expected_prev[4] !== 1'bx ) && ( HEX0_prev[4] !== HEX0_expected_prev[4] )
		&& ((HEX0_expected_prev[4] !== last_HEX0_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_expected_prev);
		$display ("     Real value = %b", HEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX0_exp[4] = HEX0_expected_prev[4];
	end
	if (
		( HEX0_expected_prev[5] !== 1'bx ) && ( HEX0_prev[5] !== HEX0_expected_prev[5] )
		&& ((HEX0_expected_prev[5] !== last_HEX0_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_expected_prev);
		$display ("     Real value = %b", HEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX0_exp[5] = HEX0_expected_prev[5];
	end
	if (
		( HEX0_expected_prev[6] !== 1'bx ) && ( HEX0_prev[6] !== HEX0_expected_prev[6] )
		&& ((HEX0_expected_prev[6] !== last_HEX0_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_expected_prev);
		$display ("     Real value = %b", HEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX0_exp[6] = HEX0_expected_prev[6];
	end
	if (
		( countfast_expected_prev[0] !== 1'bx ) && ( countfast_prev[0] !== countfast_expected_prev[0] )
		&& ((countfast_expected_prev[0] !== last_countfast_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port countfast[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", countfast_expected_prev);
		$display ("     Real value = %b", countfast_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_countfast_exp[0] = countfast_expected_prev[0];
	end
	if (
		( countfast_expected_prev[1] !== 1'bx ) && ( countfast_prev[1] !== countfast_expected_prev[1] )
		&& ((countfast_expected_prev[1] !== last_countfast_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port countfast[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", countfast_expected_prev);
		$display ("     Real value = %b", countfast_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_countfast_exp[1] = countfast_expected_prev[1];
	end
	if (
		( countfast_expected_prev[2] !== 1'bx ) && ( countfast_prev[2] !== countfast_expected_prev[2] )
		&& ((countfast_expected_prev[2] !== last_countfast_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port countfast[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", countfast_expected_prev);
		$display ("     Real value = %b", countfast_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_countfast_exp[2] = countfast_expected_prev[2];
	end
	if (
		( countfast_expected_prev[3] !== 1'bx ) && ( countfast_prev[3] !== countfast_expected_prev[3] )
		&& ((countfast_expected_prev[3] !== last_countfast_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port countfast[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", countfast_expected_prev);
		$display ("     Real value = %b", countfast_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_countfast_exp[3] = countfast_expected_prev[3];
	end
	if (
		( countfast_expected_prev[4] !== 1'bx ) && ( countfast_prev[4] !== countfast_expected_prev[4] )
		&& ((countfast_expected_prev[4] !== last_countfast_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port countfast[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", countfast_expected_prev);
		$display ("     Real value = %b", countfast_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_countfast_exp[4] = countfast_expected_prev[4];
	end
	if (
		( countfast_expected_prev[5] !== 1'bx ) && ( countfast_prev[5] !== countfast_expected_prev[5] )
		&& ((countfast_expected_prev[5] !== last_countfast_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port countfast[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", countfast_expected_prev);
		$display ("     Real value = %b", countfast_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_countfast_exp[5] = countfast_expected_prev[5];
	end
	if (
		( countfast_expected_prev[6] !== 1'bx ) && ( countfast_prev[6] !== countfast_expected_prev[6] )
		&& ((countfast_expected_prev[6] !== last_countfast_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port countfast[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", countfast_expected_prev);
		$display ("     Real value = %b", countfast_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_countfast_exp[6] = countfast_expected_prev[6];
	end
	if (
		( countfast_expected_prev[7] !== 1'bx ) && ( countfast_prev[7] !== countfast_expected_prev[7] )
		&& ((countfast_expected_prev[7] !== last_countfast_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port countfast[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", countfast_expected_prev);
		$display ("     Real value = %b", countfast_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_countfast_exp[7] = countfast_expected_prev[7];
	end
	if (
		( countfast_expected_prev[8] !== 1'bx ) && ( countfast_prev[8] !== countfast_expected_prev[8] )
		&& ((countfast_expected_prev[8] !== last_countfast_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port countfast[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", countfast_expected_prev);
		$display ("     Real value = %b", countfast_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_countfast_exp[8] = countfast_expected_prev[8];
	end
	if (
		( countfast_expected_prev[9] !== 1'bx ) && ( countfast_prev[9] !== countfast_expected_prev[9] )
		&& ((countfast_expected_prev[9] !== last_countfast_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port countfast[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", countfast_expected_prev);
		$display ("     Real value = %b", countfast_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_countfast_exp[9] = countfast_expected_prev[9];
	end
	if (
		( countfast_expected_prev[10] !== 1'bx ) && ( countfast_prev[10] !== countfast_expected_prev[10] )
		&& ((countfast_expected_prev[10] !== last_countfast_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port countfast[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", countfast_expected_prev);
		$display ("     Real value = %b", countfast_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_countfast_exp[10] = countfast_expected_prev[10];
	end
	if (
		( countfast_expected_prev[11] !== 1'bx ) && ( countfast_prev[11] !== countfast_expected_prev[11] )
		&& ((countfast_expected_prev[11] !== last_countfast_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port countfast[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", countfast_expected_prev);
		$display ("     Real value = %b", countfast_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_countfast_exp[11] = countfast_expected_prev[11];
	end
	if (
		( countfast_expected_prev[12] !== 1'bx ) && ( countfast_prev[12] !== countfast_expected_prev[12] )
		&& ((countfast_expected_prev[12] !== last_countfast_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port countfast[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", countfast_expected_prev);
		$display ("     Real value = %b", countfast_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_countfast_exp[12] = countfast_expected_prev[12];
	end
	if (
		( countfast_expected_prev[13] !== 1'bx ) && ( countfast_prev[13] !== countfast_expected_prev[13] )
		&& ((countfast_expected_prev[13] !== last_countfast_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port countfast[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", countfast_expected_prev);
		$display ("     Real value = %b", countfast_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_countfast_exp[13] = countfast_expected_prev[13];
	end
	if (
		( countfast_expected_prev[14] !== 1'bx ) && ( countfast_prev[14] !== countfast_expected_prev[14] )
		&& ((countfast_expected_prev[14] !== last_countfast_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port countfast[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", countfast_expected_prev);
		$display ("     Real value = %b", countfast_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_countfast_exp[14] = countfast_expected_prev[14];
	end
	if (
		( countfast_expected_prev[15] !== 1'bx ) && ( countfast_prev[15] !== countfast_expected_prev[15] )
		&& ((countfast_expected_prev[15] !== last_countfast_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port countfast[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", countfast_expected_prev);
		$display ("     Real value = %b", countfast_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_countfast_exp[15] = countfast_expected_prev[15];
	end
	if (
		( countfast_expected_prev[16] !== 1'bx ) && ( countfast_prev[16] !== countfast_expected_prev[16] )
		&& ((countfast_expected_prev[16] !== last_countfast_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port countfast[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", countfast_expected_prev);
		$display ("     Real value = %b", countfast_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_countfast_exp[16] = countfast_expected_prev[16];
	end
	if (
		( countfast_expected_prev[17] !== 1'bx ) && ( countfast_prev[17] !== countfast_expected_prev[17] )
		&& ((countfast_expected_prev[17] !== last_countfast_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port countfast[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", countfast_expected_prev);
		$display ("     Real value = %b", countfast_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_countfast_exp[17] = countfast_expected_prev[17];
	end
	if (
		( countfast_expected_prev[18] !== 1'bx ) && ( countfast_prev[18] !== countfast_expected_prev[18] )
		&& ((countfast_expected_prev[18] !== last_countfast_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port countfast[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", countfast_expected_prev);
		$display ("     Real value = %b", countfast_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_countfast_exp[18] = countfast_expected_prev[18];
	end
	if (
		( countfast_expected_prev[19] !== 1'bx ) && ( countfast_prev[19] !== countfast_expected_prev[19] )
		&& ((countfast_expected_prev[19] !== last_countfast_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port countfast[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", countfast_expected_prev);
		$display ("     Real value = %b", countfast_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_countfast_exp[19] = countfast_expected_prev[19];
	end
	if (
		( countfast_expected_prev[20] !== 1'bx ) && ( countfast_prev[20] !== countfast_expected_prev[20] )
		&& ((countfast_expected_prev[20] !== last_countfast_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port countfast[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", countfast_expected_prev);
		$display ("     Real value = %b", countfast_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_countfast_exp[20] = countfast_expected_prev[20];
	end
	if (
		( countfast_expected_prev[21] !== 1'bx ) && ( countfast_prev[21] !== countfast_expected_prev[21] )
		&& ((countfast_expected_prev[21] !== last_countfast_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port countfast[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", countfast_expected_prev);
		$display ("     Real value = %b", countfast_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_countfast_exp[21] = countfast_expected_prev[21];
	end
	if (
		( countfast_expected_prev[22] !== 1'bx ) && ( countfast_prev[22] !== countfast_expected_prev[22] )
		&& ((countfast_expected_prev[22] !== last_countfast_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port countfast[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", countfast_expected_prev);
		$display ("     Real value = %b", countfast_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_countfast_exp[22] = countfast_expected_prev[22];
	end
	if (
		( countfast_expected_prev[23] !== 1'bx ) && ( countfast_prev[23] !== countfast_expected_prev[23] )
		&& ((countfast_expected_prev[23] !== last_countfast_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port countfast[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", countfast_expected_prev);
		$display ("     Real value = %b", countfast_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_countfast_exp[23] = countfast_expected_prev[23];
	end
	if (
		( countfast_expected_prev[24] !== 1'bx ) && ( countfast_prev[24] !== countfast_expected_prev[24] )
		&& ((countfast_expected_prev[24] !== last_countfast_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port countfast[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", countfast_expected_prev);
		$display ("     Real value = %b", countfast_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_countfast_exp[24] = countfast_expected_prev[24];
	end
	if (
		( countfast_expected_prev[25] !== 1'bx ) && ( countfast_prev[25] !== countfast_expected_prev[25] )
		&& ((countfast_expected_prev[25] !== last_countfast_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port countfast[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", countfast_expected_prev);
		$display ("     Real value = %b", countfast_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_countfast_exp[25] = countfast_expected_prev[25];
	end
	if (
		( countslow_expected_prev[0] !== 1'bx ) && ( countslow_prev[0] !== countslow_expected_prev[0] )
		&& ((countslow_expected_prev[0] !== last_countslow_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port countslow[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", countslow_expected_prev);
		$display ("     Real value = %b", countslow_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_countslow_exp[0] = countslow_expected_prev[0];
	end
	if (
		( countslow_expected_prev[1] !== 1'bx ) && ( countslow_prev[1] !== countslow_expected_prev[1] )
		&& ((countslow_expected_prev[1] !== last_countslow_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port countslow[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", countslow_expected_prev);
		$display ("     Real value = %b", countslow_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_countslow_exp[1] = countslow_expected_prev[1];
	end
	if (
		( countslow_expected_prev[2] !== 1'bx ) && ( countslow_prev[2] !== countslow_expected_prev[2] )
		&& ((countslow_expected_prev[2] !== last_countslow_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port countslow[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", countslow_expected_prev);
		$display ("     Real value = %b", countslow_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_countslow_exp[2] = countslow_expected_prev[2];
	end
	if (
		( countslow_expected_prev[3] !== 1'bx ) && ( countslow_prev[3] !== countslow_expected_prev[3] )
		&& ((countslow_expected_prev[3] !== last_countslow_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port countslow[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", countslow_expected_prev);
		$display ("     Real value = %b", countslow_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_countslow_exp[3] = countslow_expected_prev[3];
	end
	if (
		( countslow_expected_prev[4] !== 1'bx ) && ( countslow_prev[4] !== countslow_expected_prev[4] )
		&& ((countslow_expected_prev[4] !== last_countslow_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port countslow[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", countslow_expected_prev);
		$display ("     Real value = %b", countslow_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_countslow_exp[4] = countslow_expected_prev[4];
	end
	if (
		( equal9_expected_prev !== 1'bx ) && ( equal9_prev !== equal9_expected_prev )
		&& ((equal9_expected_prev !== last_equal9_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port equal9 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", equal9_expected_prev);
		$display ("     Real value = %b", equal9_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_equal9_exp = equal9_expected_prev;
	end
	if (
		( reset_expected_prev !== 1'bx ) && ( reset_prev !== reset_expected_prev )
		&& ((reset_expected_prev !== last_reset_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reset :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reset_expected_prev);
		$display ("     Real value = %b", reset_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_reset_exp = reset_expected_prev;
	end
	if (
		( sec_expected_prev !== 1'bx ) && ( sec_prev !== sec_expected_prev )
		&& ((sec_expected_prev !== last_sec_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sec :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sec_expected_prev);
		$display ("     Real value = %b", sec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_sec_exp = sec_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module part5_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK_50;
reg [1:0] SW;
// wires                                               
wire [6:0] HEX0;
wire [25:0] countfast;
wire [4:0] countslow;
wire equal9;
wire reset;
wire sec;

wire sampler;                             

// assign statements (if any)                          
part5 i1 (
// port map - connection between master ports and signals/registers   
	.CLOCK_50(CLOCK_50),
	.HEX0(HEX0),
	.SW(SW),
	.countfast(countfast),
	.countslow(countslow),
	.equal9(equal9),
	.reset(reset),
	.sec(sec)
);

// CLOCK_50
initial
begin
	repeat(49)
	begin
		CLOCK_50 = 1'b0;
		CLOCK_50 = #10000 1'b1;
		# 10000;
	end
	CLOCK_50 = 1'b0;
end 

// SW[1]
initial
begin
	SW[1] = 1'b1;
end 

part5_vlg_sample_tst tb_sample (
	.CLOCK_50(CLOCK_50),
	.SW(SW),
	.sampler_tx(sampler)
);

part5_vlg_check_tst tb_out(
	.HEX0(HEX0),
	.countfast(countfast),
	.countslow(countslow),
	.equal9(equal9),
	.reset(reset),
	.sec(sec),
	.sampler_rx(sampler)
);
endmodule

