module lab4part4(SW, LEDR, HEX5,HEX3,HEX1,HEX0);
	input [8:0]SW;
	output [9:0]LEDR;
	output [0:6]HEX0,HEX1,HEX3,HEX5;
	
	
	// A = X, B = Y
	wire [3:0]A;
	wire [3:0]B;
	wire [3:0]S;
	wire c1, c2, c3, cin, cout;
	
	//summing	
	assign A[3:0] = SW[7:4];
	assign B[3:0] = SW[3:0];
	assign cin = SW[8];
	
	assign c1 = (~B[0]&A[0]&cin)|{B[0]&cin}|{B[0]&A[0]};
	assign S[0] = (~B[0]&~A[0]&cin)|(~B[0]&A[0]&~cin)|(B[0]&~A[0]&~cin)|(B[0]&A[0]&cin);
	
	assign c2 = (~B[1]&A[1]&c1)|{B[1]&c1}|{B[1]&A[1]};
	assign S[1] = (~B[1]&~A[1]&c1)|(~B[1]&A[1]&~c1)|(B[1]&~A[1]&~c1)|(B[1]&A[1]&c1);
	
	assign c3 = (~B[2]&A[2]&c2)|{B[2]&c2}|{B[2]&A[2]};
	assign S[2] = (~B[2]&~A[2]&c2)|(~B[2]&A[2]&~c2)|(B[2]&~A[2]&~c2)|(B[2]&A[2]&c2);
	
	assign cout = (~B[3]&A[3]&c3)|{B[3]&c3}|(B[3]&A[3]);
	assign S[3] = (~B[3]&~A[3]&c3)|(~B[3]&A[3]&~c3)|(B[3]&~A[3]&~c3)|(B[3]&A[3]&c3);
	
	assign LEDR[3:0] = S;
	assign LEDR[4] = cout;
	
	//display x and y
	
	wire s7, s6, s5, s4, s3, s2, s1, s0;
	assign s7 = SW[7];
	assign s6 = SW[6];
	assign s5 = SW[5];
	assign s4 = SW[4];
	assign s3 = SW[3];
	assign s2 = SW[2];
	assign s1 = SW[1];
	assign s0 = SW[0];
	
	assign HEX5[6] = s7|(~s7&((~s6&s5)|(s6&~s5)|(s6&~s4)));
	assign HEX5[5] = s7|(~s7&((~s5&~s4)|(s6&~s5)|(s6&~s4)));
	assign HEX5[4] = ~s7&((~s6&~s4)|(s5&~s4)) | (s7&~s6&~s5&~s4);
	assign HEX5[3] = s7|(~s7&~s6&~s5&~s4)|(~s7&~s6&s5)|(s6&~s5&s4)|(s6&s5&~s4);
	assign HEX5[2] = s7|~s6|(s6&~s5&~s4)|(s6&s5&s4);
	assign HEX5[1] = s7|~s6|(s6&~s5&~s4)|(s6&s5&s4);
	assign HEX5[0] = s7|(~s6&~s4)|(s5&s4)|(s6&~s5&s4)|(s6&s5);
	
	assign HEX3[6] = s3|(~s3&((~s2&s1)|(s2&~s1)|(s2&~s0)));
	assign HEX3[5] = s3|(~s3&((~s1&~s0)|(s6&~s1)|(s2&~s0)));
	assign HEX3[4] = ~s3&((~s2&~s0)|(s1&~s0)) | (s3&~s2&~s1&~s0);
	assign HEX3[3] = s3|(~s3&~s2&~s1&~s0)|(~s3&~s2&s1)|(s2&~s1&s0)|(s2&s1&~s0);
	assign HEX3[2] = s3|~s2|(s2&~s1&~s0)|(s2&s1&s0);
	assign HEX3[1] = s3|~s2|(s2&~s1&~s0)|(s2&s1&s0);
	assign HEX3[0] = s3|(~s2&~s0)|(s1&s0)|(s2&~s1&s0)|(s2&s1);
	
	// display summing
		
	wire z,h;
	wire a7, a6, a5, a4;
	
	assign s7 = S[3];
	assign s6 = S[2];
	assign s5 = S[1];
	assign s4 = S[0];
	
	//Comperator
	assign z = S[3]&(~(S[2]&S[1]));	
	assign h = cout;
	
	//assign HEX0[0] = (~z& hex in terms of v) | (z & part 1 in terms of a)

	assign HEX0[6] = z&(s7|(~s7&((~s6&s5)|(s6&~s5)|(s6&~s4))))|(~z&(a7|(~a7&((~a6&a5)|(a6&~a5)|(a6&~a4)))))|(h&(~g3&g2&g1&~g0|g3&~g2&~g1));
	assign HEX0[5] = z&(s7|(~s7&((~s5&~s4)|(s6&~s5)|(s6&~s4))))|(~z&(a7|(~a7&((~a5&~a4)|(a6&~a5)|(a6&~a4)))))|(h&(~g3&g2&g1&~g0|g3&~g2&~g1));
	assign HEX0[4] = z&(~s7&((~s6&~s4)|(s5&~s4)) | (s7&~s6&~s5&~s4))|(~z&(~a7&((~a6&~a4)|(a5&~a4)) | (a7&~a6&~a5&~a4)))|(h&(~g3&g2&g1&~g0|g3&~g2&~g1&~g0));
	assign HEX0[3] = z&(s7|(~s7&~s6&~s5&~s4)|(~s7&~s6&s5)|(s6&~s5&s4)|(s6&s5&~s4))|(~z&(a7|(~a7&~a6&~a5&~a4)|(~a7&~a6&a5)|(a6&~a5&a4)|(a6&a5&~a4)))|(h&(~g3&g2&g1&~g0|g3&~g2&~g1&~g0));
	assign HEX0[2] = z&(s7|~s6|(s6&~s5&~s4)|(s6&s5&s4))|(~z&(a7|~a6|(a6&~a5&~a4)|(a6&a5&a4)))|h;
	assign HEX0[1] = z&(s7|~s6|(s6&~s5&~s4)|(s6&s5&s4))|(~z&(a7|~a6|(a6&~a5&~a4)|(a6&a5&a4)))|(h&(~g3&g2&g1&g0|g3&~g2&~g1));
	assign HEX0[0] = z&(s7|(~s6&~s4)|(s5&s4)|(s6&~s5&s4)|(s6&s5))|(~z&(a7|(~a6&~a4)|(a5&a4)|(a6&~a5&a4)|(a6&a5)))|h;
	
	assign HEX1[1] = z&((S[3]&S[2]) | (S[3]&S[1]) | (S[3]&S[2]&S[1]))|h;
	assign HEX1[2] = z&((S[3]&S[2]) | (S[3]&S[1]) | (S[3]&S[2]&S[1]))|h;
	
	assign a7 = 0;
	assign a6 = S[3]&S[2]&S[1];
	assign a5 = S[3]&S[2]&(~S[1]);
	assign a4 = S[3]&S[0];
	
	assign g3 = s5&~s7&~s6;
	assign g2 = ~s7&~s6&~s5;
	assign g1 = ~s7&~s6&~s5;
	assign g0 = ~s7&~s6&s4;
	
	endmodule