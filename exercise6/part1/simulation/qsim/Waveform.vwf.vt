// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/03/2015 09:40:51"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    exercise6
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module exercise6_vlg_sample_tst(
	KEY,
	SW,
	sampler_tx
);
input [0:0] KEY;
input [1:0] SW;
output sampler_tx;

reg sample;
time current_time;
always @(KEY or SW)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module exercise6_vlg_check_tst (
	LEDR,
	clk,
	r,
	w,
	w0,
	w1,
	w2,
	w3,
	w4,
	w5,
	w6,
	w7,
	w8,
	z,
	sampler_rx
);
input [9:0] LEDR;
input  clk;
input  r;
input  w;
input  w0;
input  w1;
input  w2;
input  w3;
input  w4;
input  w5;
input  w6;
input  w7;
input  w8;
input  z;
input sampler_rx;

reg [9:0] LEDR_expected;
reg  clk_expected;
reg  r_expected;
reg  w_expected;
reg  w0_expected;
reg  w1_expected;
reg  w2_expected;
reg  w3_expected;
reg  w4_expected;
reg  w5_expected;
reg  w6_expected;
reg  w7_expected;
reg  w8_expected;
reg  z_expected;

reg [9:0] LEDR_prev;
reg  clk_prev;
reg  r_prev;
reg  w_prev;
reg  w0_prev;
reg  w1_prev;
reg  w2_prev;
reg  w3_prev;
reg  w4_prev;
reg  w5_prev;
reg  w6_prev;
reg  w7_prev;
reg  w8_prev;
reg  z_prev;

reg [9:0] LEDR_expected_prev;
reg  clk_expected_prev;
reg  r_expected_prev;
reg  w_expected_prev;
reg  w0_expected_prev;
reg  w1_expected_prev;
reg  w2_expected_prev;
reg  w3_expected_prev;
reg  w4_expected_prev;
reg  w5_expected_prev;
reg  w6_expected_prev;
reg  w7_expected_prev;
reg  w8_expected_prev;
reg  z_expected_prev;

reg [9:0] last_LEDR_exp;
reg  last_clk_exp;
reg  last_r_exp;
reg  last_w_exp;
reg  last_w0_exp;
reg  last_w1_exp;
reg  last_w2_exp;
reg  last_w3_exp;
reg  last_w4_exp;
reg  last_w5_exp;
reg  last_w6_exp;
reg  last_w7_exp;
reg  last_w8_exp;
reg  last_z_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:14] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 14'b1;
end

// update real /o prevs

always @(trigger)
begin
	LEDR_prev = LEDR;
	clk_prev = clk;
	r_prev = r;
	w_prev = w;
	w0_prev = w0;
	w1_prev = w1;
	w2_prev = w2;
	w3_prev = w3;
	w4_prev = w4;
	w5_prev = w5;
	w6_prev = w6;
	w7_prev = w7;
	w8_prev = w8;
	z_prev = z;
end

// update expected /o prevs

always @(trigger)
begin
	LEDR_expected_prev = LEDR_expected;
	clk_expected_prev = clk_expected;
	r_expected_prev = r_expected;
	w_expected_prev = w_expected;
	w0_expected_prev = w0_expected;
	w1_expected_prev = w1_expected;
	w2_expected_prev = w2_expected;
	w3_expected_prev = w3_expected;
	w4_expected_prev = w4_expected;
	w5_expected_prev = w5_expected;
	w6_expected_prev = w6_expected;
	w7_expected_prev = w7_expected;
	w8_expected_prev = w8_expected;
	z_expected_prev = z_expected;
end


// expected LEDR[ 9 ]
initial
begin
	LEDR_expected[9] = 1'bX;
end 
// expected LEDR[ 8 ]
initial
begin
	LEDR_expected[8] = 1'bX;
end 
// expected LEDR[ 7 ]
initial
begin
	LEDR_expected[7] = 1'bX;
end 
// expected LEDR[ 6 ]
initial
begin
	LEDR_expected[6] = 1'bX;
end 
// expected LEDR[ 5 ]
initial
begin
	LEDR_expected[5] = 1'bX;
end 
// expected LEDR[ 4 ]
initial
begin
	LEDR_expected[4] = 1'bX;
end 
// expected LEDR[ 3 ]
initial
begin
	LEDR_expected[3] = 1'bX;
end 
// expected LEDR[ 2 ]
initial
begin
	LEDR_expected[2] = 1'bX;
end 
// expected LEDR[ 1 ]
initial
begin
	LEDR_expected[1] = 1'bX;
end 
// expected LEDR[ 0 ]
initial
begin
	LEDR_expected[0] = 1'bX;
end 

// expected clk
initial
begin
	clk_expected = 1'bX;
end 

// expected r
initial
begin
	r_expected = 1'bX;
end 

// expected w
initial
begin
	w_expected = 1'bX;
end 

// expected w0
initial
begin
	w0_expected = 1'bX;
end 

// expected w1
initial
begin
	w1_expected = 1'bX;
end 

// expected w2
initial
begin
	w2_expected = 1'bX;
end 

// expected w3
initial
begin
	w3_expected = 1'bX;
end 

// expected w4
initial
begin
	w4_expected = 1'bX;
end 

// expected w5
initial
begin
	w5_expected = 1'bX;
end 

// expected w6
initial
begin
	w6_expected = 1'bX;
end 

// expected w7
initial
begin
	w7_expected = 1'bX;
end 

// expected w8
initial
begin
	w8_expected = 1'bX;
end 

// expected z
initial
begin
	z_expected = 1'bX;
end 
// generate trigger
always @(LEDR_expected or LEDR or clk_expected or clk or r_expected or r or w_expected or w or w0_expected or w0 or w1_expected or w1 or w2_expected or w2 or w3_expected or w3 or w4_expected or w4 or w5_expected or w5 or w6_expected or w6 or w7_expected or w7 or w8_expected or w8 or z_expected or z)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected LEDR = %b | expected clk = %b | expected r = %b | expected w = %b | expected w0 = %b | expected w1 = %b | expected w2 = %b | expected w3 = %b | expected w4 = %b | expected w5 = %b | expected w6 = %b | expected w7 = %b | expected w8 = %b | expected z = %b | ",LEDR_expected_prev,clk_expected_prev,r_expected_prev,w_expected_prev,w0_expected_prev,w1_expected_prev,w2_expected_prev,w3_expected_prev,w4_expected_prev,w5_expected_prev,w6_expected_prev,w7_expected_prev,w8_expected_prev,z_expected_prev);
	$display("| real LEDR = %b | real clk = %b | real r = %b | real w = %b | real w0 = %b | real w1 = %b | real w2 = %b | real w3 = %b | real w4 = %b | real w5 = %b | real w6 = %b | real w7 = %b | real w8 = %b | real z = %b | ",LEDR_prev,clk_prev,r_prev,w_prev,w0_prev,w1_prev,w2_prev,w3_prev,w4_prev,w5_prev,w6_prev,w7_prev,w8_prev,z_prev);
`endif
	if (
		( LEDR_expected_prev[0] !== 1'bx ) && ( LEDR_prev[0] !== LEDR_expected_prev[0] )
		&& ((LEDR_expected_prev[0] !== last_LEDR_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LEDR_exp[0] = LEDR_expected_prev[0];
	end
	if (
		( LEDR_expected_prev[1] !== 1'bx ) && ( LEDR_prev[1] !== LEDR_expected_prev[1] )
		&& ((LEDR_expected_prev[1] !== last_LEDR_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LEDR_exp[1] = LEDR_expected_prev[1];
	end
	if (
		( LEDR_expected_prev[2] !== 1'bx ) && ( LEDR_prev[2] !== LEDR_expected_prev[2] )
		&& ((LEDR_expected_prev[2] !== last_LEDR_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LEDR_exp[2] = LEDR_expected_prev[2];
	end
	if (
		( LEDR_expected_prev[3] !== 1'bx ) && ( LEDR_prev[3] !== LEDR_expected_prev[3] )
		&& ((LEDR_expected_prev[3] !== last_LEDR_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LEDR_exp[3] = LEDR_expected_prev[3];
	end
	if (
		( LEDR_expected_prev[4] !== 1'bx ) && ( LEDR_prev[4] !== LEDR_expected_prev[4] )
		&& ((LEDR_expected_prev[4] !== last_LEDR_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LEDR_exp[4] = LEDR_expected_prev[4];
	end
	if (
		( LEDR_expected_prev[5] !== 1'bx ) && ( LEDR_prev[5] !== LEDR_expected_prev[5] )
		&& ((LEDR_expected_prev[5] !== last_LEDR_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LEDR_exp[5] = LEDR_expected_prev[5];
	end
	if (
		( LEDR_expected_prev[6] !== 1'bx ) && ( LEDR_prev[6] !== LEDR_expected_prev[6] )
		&& ((LEDR_expected_prev[6] !== last_LEDR_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LEDR_exp[6] = LEDR_expected_prev[6];
	end
	if (
		( LEDR_expected_prev[7] !== 1'bx ) && ( LEDR_prev[7] !== LEDR_expected_prev[7] )
		&& ((LEDR_expected_prev[7] !== last_LEDR_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LEDR_exp[7] = LEDR_expected_prev[7];
	end
	if (
		( LEDR_expected_prev[8] !== 1'bx ) && ( LEDR_prev[8] !== LEDR_expected_prev[8] )
		&& ((LEDR_expected_prev[8] !== last_LEDR_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LEDR_exp[8] = LEDR_expected_prev[8];
	end
	if (
		( LEDR_expected_prev[9] !== 1'bx ) && ( LEDR_prev[9] !== LEDR_expected_prev[9] )
		&& ((LEDR_expected_prev[9] !== last_LEDR_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LEDR_exp[9] = LEDR_expected_prev[9];
	end
	if (
		( clk_expected_prev !== 1'bx ) && ( clk_prev !== clk_expected_prev )
		&& ((clk_expected_prev !== last_clk_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clk :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clk_expected_prev);
		$display ("     Real value = %b", clk_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_clk_exp = clk_expected_prev;
	end
	if (
		( r_expected_prev !== 1'bx ) && ( r_prev !== r_expected_prev )
		&& ((r_expected_prev !== last_r_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r_expected_prev);
		$display ("     Real value = %b", r_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_r_exp = r_expected_prev;
	end
	if (
		( w_expected_prev !== 1'bx ) && ( w_prev !== w_expected_prev )
		&& ((w_expected_prev !== last_w_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w_expected_prev);
		$display ("     Real value = %b", w_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_w_exp = w_expected_prev;
	end
	if (
		( w0_expected_prev !== 1'bx ) && ( w0_prev !== w0_expected_prev )
		&& ((w0_expected_prev !== last_w0_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w0_expected_prev);
		$display ("     Real value = %b", w0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_w0_exp = w0_expected_prev;
	end
	if (
		( w1_expected_prev !== 1'bx ) && ( w1_prev !== w1_expected_prev )
		&& ((w1_expected_prev !== last_w1_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w1_expected_prev);
		$display ("     Real value = %b", w1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_w1_exp = w1_expected_prev;
	end
	if (
		( w2_expected_prev !== 1'bx ) && ( w2_prev !== w2_expected_prev )
		&& ((w2_expected_prev !== last_w2_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w2_expected_prev);
		$display ("     Real value = %b", w2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_w2_exp = w2_expected_prev;
	end
	if (
		( w3_expected_prev !== 1'bx ) && ( w3_prev !== w3_expected_prev )
		&& ((w3_expected_prev !== last_w3_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w3_expected_prev);
		$display ("     Real value = %b", w3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_w3_exp = w3_expected_prev;
	end
	if (
		( w4_expected_prev !== 1'bx ) && ( w4_prev !== w4_expected_prev )
		&& ((w4_expected_prev !== last_w4_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w4_expected_prev);
		$display ("     Real value = %b", w4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_w4_exp = w4_expected_prev;
	end
	if (
		( w5_expected_prev !== 1'bx ) && ( w5_prev !== w5_expected_prev )
		&& ((w5_expected_prev !== last_w5_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w5_expected_prev);
		$display ("     Real value = %b", w5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_w5_exp = w5_expected_prev;
	end
	if (
		( w6_expected_prev !== 1'bx ) && ( w6_prev !== w6_expected_prev )
		&& ((w6_expected_prev !== last_w6_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w6_expected_prev);
		$display ("     Real value = %b", w6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_w6_exp = w6_expected_prev;
	end
	if (
		( w7_expected_prev !== 1'bx ) && ( w7_prev !== w7_expected_prev )
		&& ((w7_expected_prev !== last_w7_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w7_expected_prev);
		$display ("     Real value = %b", w7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_w7_exp = w7_expected_prev;
	end
	if (
		( w8_expected_prev !== 1'bx ) && ( w8_prev !== w8_expected_prev )
		&& ((w8_expected_prev !== last_w8_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w8 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w8_expected_prev);
		$display ("     Real value = %b", w8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_w8_exp = w8_expected_prev;
	end
	if (
		( z_expected_prev !== 1'bx ) && ( z_prev !== z_expected_prev )
		&& ((z_expected_prev !== last_z_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port z :: @time = %t",  $realtime);
		$display ("     Expected value = %b", z_expected_prev);
		$display ("     Real value = %b", z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_z_exp = z_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module exercise6_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [0:0] KEY;
reg [1:0] SW;
// wires                                               
wire [9:0] LEDR;
wire clk;
wire r;
wire w;
wire w0;
wire w1;
wire w2;
wire w3;
wire w4;
wire w5;
wire w6;
wire w7;
wire w8;
wire z;

wire sampler;                             

// assign statements (if any)                          
exercise6 i1 (
// port map - connection between master ports and signals/registers   
	.KEY(KEY),
	.LEDR(LEDR),
	.SW(SW),
	.clk(clk),
	.r(r),
	.w(w),
	.w0(w0),
	.w1(w1),
	.w2(w2),
	.w3(w3),
	.w4(w4),
	.w5(w5),
	.w6(w6),
	.w7(w7),
	.w8(w8),
	.z(z)
);

// KEY[0]
always
begin
	KEY[0] = 1'b0;
	KEY[0] = #10000 1'b1;
	#10000;
end 

// SW[0]
initial
begin
	SW[0] = 1'b0;
	SW[0] = #120000 1'b1;
	SW[0] = #120000 1'b0;
end 

// SW[1]
initial
begin
	SW[1] = 1'b0;
	SW[1] = #20000 1'b1;
	SW[1] = #20000 1'b0;
	SW[1] = #40000 1'b1;
	SW[1] = #520000 1'b0;
end 

exercise6_vlg_sample_tst tb_sample (
	.KEY(KEY),
	.SW(SW),
	.sampler_tx(sampler)
);

exercise6_vlg_check_tst tb_out(
	.LEDR(LEDR),
	.clk(clk),
	.r(r),
	.w(w),
	.w0(w0),
	.w1(w1),
	.w2(w2),
	.w3(w3),
	.w4(w4),
	.w5(w5),
	.w6(w6),
	.w7(w7),
	.w8(w8),
	.z(z),
	.sampler_rx(sampler)
);
endmodule

