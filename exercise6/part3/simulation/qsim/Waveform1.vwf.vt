// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/03/2015 12:11:27"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    part3
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module part3_vlg_sample_tst(
	CLOCK_50,
	KEY,
	SW,
	sampler_tx
);
input  CLOCK_50;
input [1:0] KEY;
input [2:0] SW;
output sampler_tx;

reg sample;
time current_time;
always @(CLOCK_50 or KEY or SW)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module part3_vlg_check_tst (
	LEDR,
	halfsecond,
	morse,
	value,
	sampler_rx
);
input [0:0] LEDR;
input  halfsecond;
input [15:0] morse;
input [2:0] value;
input sampler_rx;

reg [0:0] LEDR_expected;
reg  halfsecond_expected;
reg [15:0] morse_expected;
reg [2:0] value_expected;

reg [0:0] LEDR_prev;
reg  halfsecond_prev;
reg [15:0] morse_prev;
reg [2:0] value_prev;

reg [0:0] LEDR_expected_prev;
reg  halfsecond_expected_prev;
reg [15:0] morse_expected_prev;
reg [2:0] value_expected_prev;

reg [0:0] last_LEDR_exp;
reg  last_halfsecond_exp;
reg [15:0] last_morse_exp;
reg [2:0] last_value_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	LEDR_prev = LEDR;
	halfsecond_prev = halfsecond;
	morse_prev = morse;
	value_prev = value;
end

// update expected /o prevs

always @(trigger)
begin
	LEDR_expected_prev = LEDR_expected;
	halfsecond_expected_prev = halfsecond_expected;
	morse_expected_prev = morse_expected;
	value_expected_prev = value_expected;
end



// expected LEDR[0]
initial
begin
	LEDR_expected[0] = 1'bX;
	LEDR_expected[0] = #999000 1'b0;
	LEDR_expected[0] = #1000 1'bX;
end 

// expected halfsecond
initial
begin
	halfsecond_expected = 1'bX;
	halfsecond_expected = #999000 1'b0;
	halfsecond_expected = #1000 1'bX;
end 
// expected morse[ 15 ]
initial
begin
	morse_expected[15] = 1'bX;
	morse_expected[15] = #999000 1'b0;
	morse_expected[15] = #1000 1'bX;
end 
// expected morse[ 14 ]
initial
begin
	morse_expected[14] = 1'bX;
	morse_expected[14] = #999000 1'b0;
	morse_expected[14] = #1000 1'bX;
end 
// expected morse[ 13 ]
initial
begin
	morse_expected[13] = 1'bX;
	morse_expected[13] = #999000 1'b0;
	morse_expected[13] = #1000 1'bX;
end 
// expected morse[ 12 ]
initial
begin
	morse_expected[12] = 1'bX;
	morse_expected[12] = #999000 1'b0;
	morse_expected[12] = #1000 1'bX;
end 
// expected morse[ 11 ]
initial
begin
	morse_expected[11] = 1'bX;
	morse_expected[11] = #999000 1'b0;
	morse_expected[11] = #1000 1'bX;
end 
// expected morse[ 10 ]
initial
begin
	morse_expected[10] = 1'bX;
	morse_expected[10] = #999000 1'b0;
	morse_expected[10] = #1000 1'bX;
end 
// expected morse[ 9 ]
initial
begin
	morse_expected[9] = 1'bX;
	morse_expected[9] = #999000 1'b0;
	morse_expected[9] = #1000 1'bX;
end 
// expected morse[ 8 ]
initial
begin
	morse_expected[8] = 1'bX;
	morse_expected[8] = #999000 1'b0;
	morse_expected[8] = #1000 1'bX;
end 
// expected morse[ 7 ]
initial
begin
	morse_expected[7] = 1'bX;
	morse_expected[7] = #999000 1'b0;
	morse_expected[7] = #1000 1'bX;
end 
// expected morse[ 6 ]
initial
begin
	morse_expected[6] = 1'bX;
	morse_expected[6] = #999000 1'b0;
	morse_expected[6] = #1000 1'bX;
end 
// expected morse[ 5 ]
initial
begin
	morse_expected[5] = 1'bX;
	morse_expected[5] = #999000 1'b0;
	morse_expected[5] = #1000 1'bX;
end 
// expected morse[ 4 ]
initial
begin
	morse_expected[4] = 1'bX;
	morse_expected[4] = #999000 1'b0;
	morse_expected[4] = #1000 1'bX;
end 
// expected morse[ 3 ]
initial
begin
	morse_expected[3] = 1'bX;
	morse_expected[3] = #999000 1'b0;
	morse_expected[3] = #1000 1'bX;
end 
// expected morse[ 2 ]
initial
begin
	morse_expected[2] = 1'bX;
	morse_expected[2] = #999000 1'b0;
	morse_expected[2] = #1000 1'bX;
end 
// expected morse[ 1 ]
initial
begin
	morse_expected[1] = 1'bX;
	morse_expected[1] = #999000 1'b0;
	morse_expected[1] = #1000 1'bX;
end 
// expected morse[ 0 ]
initial
begin
	morse_expected[0] = 1'bX;
	morse_expected[0] = #999000 1'b0;
	morse_expected[0] = #1000 1'bX;
end 
// expected value[ 2 ]
initial
begin
	value_expected[2] = 1'bX;
	value_expected[2] = #999000 1'b0;
	value_expected[2] = #1000 1'bX;
end 
// expected value[ 1 ]
initial
begin
	value_expected[1] = 1'bX;
	value_expected[1] = #999000 1'b0;
	value_expected[1] = #1000 1'bX;
end 
// expected value[ 0 ]
initial
begin
	value_expected[0] = 1'bX;
	value_expected[0] = #999000 1'b0;
	value_expected[0] = #1000 1'bX;
end 
// generate trigger
always @(LEDR_expected or LEDR or halfsecond_expected or halfsecond or morse_expected or morse or value_expected or value)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected LEDR = %b | expected halfsecond = %b | expected morse = %b | expected value = %b | ",LEDR_expected_prev,halfsecond_expected_prev,morse_expected_prev,value_expected_prev);
	$display("| real LEDR = %b | real halfsecond = %b | real morse = %b | real value = %b | ",LEDR_prev,halfsecond_prev,morse_prev,value_prev);
`endif
	if (
		( LEDR_expected_prev !== 1'bx ) && ( LEDR_prev !== LEDR_expected_prev )
		&& ((LEDR_expected_prev !== last_LEDR_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LEDR_exp = LEDR_expected_prev;
	end
	if (
		( halfsecond_expected_prev !== 1'bx ) && ( halfsecond_prev !== halfsecond_expected_prev )
		&& ((halfsecond_expected_prev !== last_halfsecond_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port halfsecond :: @time = %t",  $realtime);
		$display ("     Expected value = %b", halfsecond_expected_prev);
		$display ("     Real value = %b", halfsecond_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_halfsecond_exp = halfsecond_expected_prev;
	end
	if (
		( morse_expected_prev[0] !== 1'bx ) && ( morse_prev[0] !== morse_expected_prev[0] )
		&& ((morse_expected_prev[0] !== last_morse_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port morse[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", morse_expected_prev);
		$display ("     Real value = %b", morse_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_morse_exp[0] = morse_expected_prev[0];
	end
	if (
		( morse_expected_prev[1] !== 1'bx ) && ( morse_prev[1] !== morse_expected_prev[1] )
		&& ((morse_expected_prev[1] !== last_morse_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port morse[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", morse_expected_prev);
		$display ("     Real value = %b", morse_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_morse_exp[1] = morse_expected_prev[1];
	end
	if (
		( morse_expected_prev[2] !== 1'bx ) && ( morse_prev[2] !== morse_expected_prev[2] )
		&& ((morse_expected_prev[2] !== last_morse_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port morse[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", morse_expected_prev);
		$display ("     Real value = %b", morse_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_morse_exp[2] = morse_expected_prev[2];
	end
	if (
		( morse_expected_prev[3] !== 1'bx ) && ( morse_prev[3] !== morse_expected_prev[3] )
		&& ((morse_expected_prev[3] !== last_morse_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port morse[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", morse_expected_prev);
		$display ("     Real value = %b", morse_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_morse_exp[3] = morse_expected_prev[3];
	end
	if (
		( morse_expected_prev[4] !== 1'bx ) && ( morse_prev[4] !== morse_expected_prev[4] )
		&& ((morse_expected_prev[4] !== last_morse_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port morse[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", morse_expected_prev);
		$display ("     Real value = %b", morse_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_morse_exp[4] = morse_expected_prev[4];
	end
	if (
		( morse_expected_prev[5] !== 1'bx ) && ( morse_prev[5] !== morse_expected_prev[5] )
		&& ((morse_expected_prev[5] !== last_morse_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port morse[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", morse_expected_prev);
		$display ("     Real value = %b", morse_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_morse_exp[5] = morse_expected_prev[5];
	end
	if (
		( morse_expected_prev[6] !== 1'bx ) && ( morse_prev[6] !== morse_expected_prev[6] )
		&& ((morse_expected_prev[6] !== last_morse_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port morse[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", morse_expected_prev);
		$display ("     Real value = %b", morse_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_morse_exp[6] = morse_expected_prev[6];
	end
	if (
		( morse_expected_prev[7] !== 1'bx ) && ( morse_prev[7] !== morse_expected_prev[7] )
		&& ((morse_expected_prev[7] !== last_morse_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port morse[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", morse_expected_prev);
		$display ("     Real value = %b", morse_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_morse_exp[7] = morse_expected_prev[7];
	end
	if (
		( morse_expected_prev[8] !== 1'bx ) && ( morse_prev[8] !== morse_expected_prev[8] )
		&& ((morse_expected_prev[8] !== last_morse_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port morse[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", morse_expected_prev);
		$display ("     Real value = %b", morse_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_morse_exp[8] = morse_expected_prev[8];
	end
	if (
		( morse_expected_prev[9] !== 1'bx ) && ( morse_prev[9] !== morse_expected_prev[9] )
		&& ((morse_expected_prev[9] !== last_morse_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port morse[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", morse_expected_prev);
		$display ("     Real value = %b", morse_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_morse_exp[9] = morse_expected_prev[9];
	end
	if (
		( morse_expected_prev[10] !== 1'bx ) && ( morse_prev[10] !== morse_expected_prev[10] )
		&& ((morse_expected_prev[10] !== last_morse_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port morse[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", morse_expected_prev);
		$display ("     Real value = %b", morse_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_morse_exp[10] = morse_expected_prev[10];
	end
	if (
		( morse_expected_prev[11] !== 1'bx ) && ( morse_prev[11] !== morse_expected_prev[11] )
		&& ((morse_expected_prev[11] !== last_morse_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port morse[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", morse_expected_prev);
		$display ("     Real value = %b", morse_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_morse_exp[11] = morse_expected_prev[11];
	end
	if (
		( morse_expected_prev[12] !== 1'bx ) && ( morse_prev[12] !== morse_expected_prev[12] )
		&& ((morse_expected_prev[12] !== last_morse_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port morse[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", morse_expected_prev);
		$display ("     Real value = %b", morse_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_morse_exp[12] = morse_expected_prev[12];
	end
	if (
		( morse_expected_prev[13] !== 1'bx ) && ( morse_prev[13] !== morse_expected_prev[13] )
		&& ((morse_expected_prev[13] !== last_morse_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port morse[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", morse_expected_prev);
		$display ("     Real value = %b", morse_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_morse_exp[13] = morse_expected_prev[13];
	end
	if (
		( morse_expected_prev[14] !== 1'bx ) && ( morse_prev[14] !== morse_expected_prev[14] )
		&& ((morse_expected_prev[14] !== last_morse_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port morse[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", morse_expected_prev);
		$display ("     Real value = %b", morse_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_morse_exp[14] = morse_expected_prev[14];
	end
	if (
		( morse_expected_prev[15] !== 1'bx ) && ( morse_prev[15] !== morse_expected_prev[15] )
		&& ((morse_expected_prev[15] !== last_morse_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port morse[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", morse_expected_prev);
		$display ("     Real value = %b", morse_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_morse_exp[15] = morse_expected_prev[15];
	end
	if (
		( value_expected_prev[0] !== 1'bx ) && ( value_prev[0] !== value_expected_prev[0] )
		&& ((value_expected_prev[0] !== last_value_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port value[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", value_expected_prev);
		$display ("     Real value = %b", value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_value_exp[0] = value_expected_prev[0];
	end
	if (
		( value_expected_prev[1] !== 1'bx ) && ( value_prev[1] !== value_expected_prev[1] )
		&& ((value_expected_prev[1] !== last_value_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port value[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", value_expected_prev);
		$display ("     Real value = %b", value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_value_exp[1] = value_expected_prev[1];
	end
	if (
		( value_expected_prev[2] !== 1'bx ) && ( value_prev[2] !== value_expected_prev[2] )
		&& ((value_expected_prev[2] !== last_value_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port value[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", value_expected_prev);
		$display ("     Real value = %b", value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_value_exp[2] = value_expected_prev[2];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#2000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module part3_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK_50;
reg [1:0] KEY;
reg [2:0] SW;
// wires                                               
wire [0:0] LEDR;
wire halfsecond;
wire [15:0] morse;
wire [2:0] value;

wire sampler;                             

// assign statements (if any)                          
part3 i1 (
// port map - connection between master ports and signals/registers   
	.CLOCK_50(CLOCK_50),
	.KEY(KEY),
	.LEDR(LEDR),
	.SW(SW),
	.halfsecond(halfsecond),
	.morse(morse),
	.value(value)
);

// CLOCK_50
initial
begin
	repeat(32)
	begin
		CLOCK_50 = 1'b0;
		CLOCK_50 = #15000 1'b1;
		# 15000;
	end
	repeat(34)
	begin
		CLOCK_50 = 1'b0;
		CLOCK_50 = #15000 1'b1;
		# 15000;
	end
	CLOCK_50 = 1'b0;
	CLOCK_50 = #15000 1'b1;
end 

// KEY[0]
initial
begin
	KEY[0] = 1'b0;
end 

// KEY[1]
initial
begin
	KEY[1] = 1'b0;
	KEY[1] = #120000 1'b1;
	KEY[1] = #80000 1'b0;
end 

// SW[0]
initial
begin
	SW[0] = 1'b0;
	SW[0] = #20000 1'b1;
	SW[0] = #180000 1'b0;
end 

// SW[1]
initial
begin
	SW[1] = 1'b0;
end 

// SW[2]
initial
begin
	SW[2] = 1'b0;
	SW[2] = #20000 1'b1;
	SW[2] = #180000 1'b0;
end 

part3_vlg_sample_tst tb_sample (
	.CLOCK_50(CLOCK_50),
	.KEY(KEY),
	.SW(SW),
	.sampler_tx(sampler)
);

part3_vlg_check_tst tb_out(
	.LEDR(LEDR),
	.halfsecond(halfsecond),
	.morse(morse),
	.value(value),
	.sampler_rx(sampler)
);
endmodule

